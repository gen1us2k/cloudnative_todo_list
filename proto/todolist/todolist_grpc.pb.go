// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: todolist/todolist.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TodolistAPIClient is the client API for TodolistAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TodolistAPIClient interface {
	CreateTodo(ctx context.Context, in *Todo, opts ...grpc.CallOption) (*Response, error)
	ListTodos(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Todo, error)
	UpdateTodo(ctx context.Context, in *Todo, opts ...grpc.CallOption) (*Todo, error)
	DeleteTodo(ctx context.Context, in *Todo, opts ...grpc.CallOption) (*Response, error)
}

type todolistAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewTodolistAPIClient(cc grpc.ClientConnInterface) TodolistAPIClient {
	return &todolistAPIClient{cc}
}

func (c *todolistAPIClient) CreateTodo(ctx context.Context, in *Todo, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/grpc.TodolistAPI/CreateTodo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todolistAPIClient) ListTodos(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Todo, error) {
	out := new(Todo)
	err := c.cc.Invoke(ctx, "/grpc.TodolistAPI/ListTodos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todolistAPIClient) UpdateTodo(ctx context.Context, in *Todo, opts ...grpc.CallOption) (*Todo, error) {
	out := new(Todo)
	err := c.cc.Invoke(ctx, "/grpc.TodolistAPI/UpdateTodo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todolistAPIClient) DeleteTodo(ctx context.Context, in *Todo, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/grpc.TodolistAPI/DeleteTodo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TodolistAPIServer is the server API for TodolistAPI service.
// All implementations should embed UnimplementedTodolistAPIServer
// for forward compatibility
type TodolistAPIServer interface {
	CreateTodo(context.Context, *Todo) (*Response, error)
	ListTodos(context.Context, *emptypb.Empty) (*Todo, error)
	UpdateTodo(context.Context, *Todo) (*Todo, error)
	DeleteTodo(context.Context, *Todo) (*Response, error)
}

// UnimplementedTodolistAPIServer should be embedded to have forward compatible implementations.
type UnimplementedTodolistAPIServer struct {
}

func (UnimplementedTodolistAPIServer) CreateTodo(context.Context, *Todo) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTodo not implemented")
}
func (UnimplementedTodolistAPIServer) ListTodos(context.Context, *emptypb.Empty) (*Todo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTodos not implemented")
}
func (UnimplementedTodolistAPIServer) UpdateTodo(context.Context, *Todo) (*Todo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTodo not implemented")
}
func (UnimplementedTodolistAPIServer) DeleteTodo(context.Context, *Todo) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTodo not implemented")
}

// UnsafeTodolistAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TodolistAPIServer will
// result in compilation errors.
type UnsafeTodolistAPIServer interface {
	mustEmbedUnimplementedTodolistAPIServer()
}

func RegisterTodolistAPIServer(s grpc.ServiceRegistrar, srv TodolistAPIServer) {
	s.RegisterService(&TodolistAPI_ServiceDesc, srv)
}

func _TodolistAPI_CreateTodo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Todo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodolistAPIServer).CreateTodo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.TodolistAPI/CreateTodo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodolistAPIServer).CreateTodo(ctx, req.(*Todo))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodolistAPI_ListTodos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodolistAPIServer).ListTodos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.TodolistAPI/ListTodos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodolistAPIServer).ListTodos(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodolistAPI_UpdateTodo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Todo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodolistAPIServer).UpdateTodo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.TodolistAPI/UpdateTodo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodolistAPIServer).UpdateTodo(ctx, req.(*Todo))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodolistAPI_DeleteTodo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Todo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodolistAPIServer).DeleteTodo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.TodolistAPI/DeleteTodo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodolistAPIServer).DeleteTodo(ctx, req.(*Todo))
	}
	return interceptor(ctx, in, info, handler)
}

// TodolistAPI_ServiceDesc is the grpc.ServiceDesc for TodolistAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TodolistAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.TodolistAPI",
	HandlerType: (*TodolistAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTodo",
			Handler:    _TodolistAPI_CreateTodo_Handler,
		},
		{
			MethodName: "ListTodos",
			Handler:    _TodolistAPI_ListTodos_Handler,
		},
		{
			MethodName: "UpdateTodo",
			Handler:    _TodolistAPI_UpdateTodo_Handler,
		},
		{
			MethodName: "DeleteTodo",
			Handler:    _TodolistAPI_DeleteTodo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "todolist/todolist.proto",
}
